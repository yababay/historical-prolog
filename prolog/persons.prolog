:- module(redis_db, [
	имя_по_ид/2, 
	титул_по_ид/2, 
	имя_в_родительном/2, 
	имя_в_дательном/2, 
	пол_по_ид/2, 
	гиперссылка_по_ид/2,
	родитель_ребенка/3,
	ребенок_родителя/3,
	приходится_супругом/3,
	кем_приходится/3
]).

:- use_module(grammar).

супруг(1, 'муж').
супруг(0, 'жена').
родитель(1, 'отец').
родитель(0, 'мать').
ребенок(1, 'сын').
ребенок(0, 'дочь').

гиперссылка_по_ид(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "ссылка", Вывод).

имя_по_ид(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "общее имя", Вывод).

имя_в_дательном(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "дательный падеж", Вывод).

имя_в_родительном(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "родительный падеж", Вывод).

титул_по_ид(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "титул", Вывод).

пол_по_ид(ИД, Вывод):-
    свойство_личности_по_ид(ИД, "пол", Вывод).

родитель_ребенка(ИД1, ИД2, Пол):-
    родство_и_пол(ИД1, ИД2, "родитель:", Пол).

ребенок_родителя(ИД1, ИД2, Пол):-
    родство_и_пол(ИД1, ИД2, "ребенок:", Пол).

приходится_супругом(ИД1, ИД2, Пол):-
    родство_и_пол(ИД1, ИД2, "супруг:", Пол).

факт_о_родстве(ИД1, ИД2, Факт):-
    кем_приходится(ИД1, ИД2, Родство),
    в_творительном(Родство, РодствоТП),
    имя_по_ид(ИД1, Имя1),
    имя_по_ид(ИД2, Имя2),
    титул_по_ид(ИД1, Титул1),
    титул_по_ид(ИД2, Титул2),
    с_заглавной_буквы(Титул1, Титул1ЗБ),
    в_дательном(Титул2, Титул2ДП),
    в_дательном(Имя2, Имя2ДП),
    format(atom(Факт), "~w ~w приходился ~w ~w ~w.", [Титул1ЗБ, Имя1, Титул2ДП, Имя2ДП, РодствоТП]).
    

кем_приходится(ИД1, ИД2, Родство):-
    ребенок_родителя(ИД1, ИД2, Пол), ребенок(Пол, Родство),!;
    родитель_ребенка(ИД1, ИД2, Пол), родитель(Пол, Родство),!;
    приходится_супругом(ИД1, ИД2, Пол), супруг(Пол, Родство),!.

родство_и_пол(ИД1, ИД2, Родство, Пол):-
    atom_concat(Родство, ИД1, Ключ),
    atom_concat("", ИД2, ИД3),
    redis_server(default, redis:6379, []),
    redis(default, get(Ключ), ИД4),
    ИД3 == ИД4,
    пол_по_ид(ИД1, Пол).

свойство_личности_по_ид(ИД, Свойство, Вывод):-
    atom_concat("", Свойство, СвойствоАтом),
    atom_concat("личность:", ИД, Ключ),
    redis_server(default, redis:6379, []),
    redis(default, hget(Ключ, СвойствоАтом), Вывод).

:- begin_tests(persons).

test(кем_приходится):-
    кем_приходится("1a59c12b-2f8c-4e9d-8fe4-290695db11db", "5a9d8df0-3124-48a3-ae4b-b173d5bde221", Родство),
    assertion(Родство == 'сын').

test(имя_по_ид) :-
	имя_по_ид("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
        assertion(Свойство == 'Ольга').

test(имя_в_родительном) :-
	имя_в_родительном("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
        assertion(Свойство == 'Ольги').

test(имя_в_дательном) :-
	имя_в_дательном("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
        assertion(Свойство == 'Ольге').

test(титул_по_ид) :-
	титул_по_ид("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
        assertion(Свойство == 'княгиня киевская').

test(пол_по_ид) :-
	пол_по_ид("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
        assertion(Свойство == 0).

test(гиперссылка_по_ид) :-
	гиперссылка_по_ид("96425b4e-937c-407d-b01d-058a310a5bcd", Свойство),
	sub_string(Свойство, 0, 5, _, Подстрока),
	atom_concat("", Подстрока, HTTPS),
        assertion(HTTPS == 'https').

test(ребенок_родителя):-
	ребенок_родителя("1a59c12b-2f8c-4e9d-8fe4-290695db11db", "5a9d8df0-3124-48a3-ae4b-b173d5bde221", Пол),
	assertion(Пол == 1).

test(родитель_ребенка):-
	родитель_ребенка("5a9d8df0-3124-48a3-ae4b-b173d5bde221", "1a59c12b-2f8c-4e9d-8fe4-290695db11db", Пол),
	assertion(Пол == 1).

test(ребенок_родителя):-
	ребенок_родителя("8be48fa1-dce8-487d-94d2-a4d0b3c8160c", "96425b4e-937c-407d-b01d-058a310a5bcd", Пол),
	assertion(Пол == 1).

test(родитель_ребенка):-
	родитель_ребенка("96425b4e-937c-407d-b01d-058a310a5bcd", "8be48fa1-dce8-487d-94d2-a4d0b3c8160c", Пол),
	assertion(Пол == 0).

tect(приходится_супругом):-
	приходится_супругом("1a59c12b-2f8c-4e9d-8fe4-290695db11db", "96425b4e-937c-407d-b01d-058a310a5bcd", Пол),
	assertion(Пол == 0).

tect(приходится_супругом):-
	приходится_супругом("96425b4e-937c-407d-b01d-058a310a5bcd", "1a59c12b-2f8c-4e9d-8fe4-290695db11db", Пол),
	assertion(Пол == 1).

:- end_tests(persons).

