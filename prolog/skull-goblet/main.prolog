:- use_module("persons").
:- use_module("grammatics").
:- use_module("ethnic-groups").
:- use_module("sources").
:- use_module("facts").

а_был_ли_пир(М, И, Ф):-
    \+пил_на_пиру_из_такого_кубка_с(_, М, И),
    format(atom(Ф), "Пир также не упоминается.", []),!.

а_был_ли_пир(М, И, Ф):-
    историческая_личность(М, ИДМ),
    жена(ИДЖ, ИДМ),
    историческая_личность(Ж, ИДЖ),
    неизвестно(Ж),
    творительный_падеж(_, Ж),
    пил_на_пиру_из_такого_кубка_с(_, М, И),
    format(atom(Ф), "На пиру он пил из этого кубка со своей женой, имя которой не сохранилось.", []),!.

а_был_ли_пир(М, И, Ф):-
    историческая_личность(М, ИДМ),
    жена(ИДЖ, ИДМ),
    историческая_личность(Ж, ИДЖ),
    \+неизвестно(Ж),
    творительный_падеж(ЖТП, Ж),
    пил_на_пиру_из_такого_кубка_с(ЖТП, М, И),
    format(atom(Ф), "На пиру он пил из этого кубка со своей женой ~w.", [ЖТП]),!.

сводка_фактов(Ф):- 
    победили(Н1, Н2ВП, Г, И),
    источник(А, И),
    факт_об_источнике(А, И, ФИ),
    факт_о_годе(Г, ФГ),
    факт_о_столкновении(Н1, Н2ВП, Л1, ФС),
    винительный_падеж(Н2ВП, Н2),
    родительный_падеж(Н2РП, Н2),
    лидер(Л2, Т2, Н2РП),
    родительный_падеж(Л2РП, Л2),
    родительный_падеж(Т2РП, Т2),
    а_был_ли_череп(Л2РП, Т2РП, Л1, И, ФЧ),
    а_был_ли_пир(Л1, И, ФЖП),
    format(atom(Ф), "* ~w ~w ~w ~w ~w", [ФИ, ФГ, ФС, ФЧ, ФЖП]).
/*
а_был_ли_пир(М, И1, Ф):-
    пил_на_пиру_из_такого_кубка_с_женой(_, М, И2),
    И1 == И2,
    format(atom(Ф), "с пиром", []),!.

а_был_ли_пир(М, И1, Ф):-
    пил_на_пиру_из_такого_кубка_с_женой(_, М, И2),
    И1 \= И2,
    format(atom(Ф), "без пира", []).
*/

факт_о_столкновении(Н1, Н2ВП, Л1, Ф):-
    родительный_падеж(Н1РП, Н1),
    лидер(Л1, _, Н1РП),
    неизвестно(Л1),
    format(atom(Ф), " ~w (имя и титул их лидера не упоминаются) победили ~w.", [Н1, Н2ВП]),!.

факт_о_столкновении(Н1, Н2ВП, Л1, Ф):-
    родительный_падеж(Н1РП, Н1),
    лидер(Л1, Т1, Н1РП),
    родительный_падеж(Т1РП, Т1),
    родительный_падеж(Л1РП, Л1),
    format(atom(Ф), " ~w под предводительством ~w ~w победили ~w.", [Н1, Т1РП, Л1РП, Н2ВП]).

а_был_ли_череп(Л2РП, _, Л, И, _):-
    изготовил_кубок_из_черепа(ЛxРП, Л, И),
    Л2РП \= ЛxРП,
    fail.

а_был_ли_череп(_, _, Л, И, Ф):-
    \+изготовил_кубок_из_черепа(_, Л, И),
    format(atom(Ф), "Об изготовлении кубка из черепа применительно к этому столкновению этот источник не сообщает.", []).

а_был_ли_череп(Л2РП, Т2РП, Л1, И1, Ф):-
    изготовил_кубок_из_черепа(ЛxРП, Л1, И2),
    И1 == И2,
    Л2РП == ЛxРП,
    format(atom(Ф), "Он велел изготовить кубок из черепа лидера побежденных - ~w ~w.", [Т2РП, Л2РП]).

факт_о_годе(Г, Ф):-
    неизвестно(Г),
    format(atom(Ф), "Однажды", []),!.

факт_о_годе(Г, Ф):-
    format(atom(Ф), "В ~w г.", [Г]).

факт_об_источнике(А, И, Ф):-
	предложный_падеж(ИПП, И),
	format(atom(Ф), "**~w** в ~w сообщает следующее.", [А, ИПП]).

сбор_всех_вариантов(С1, С2):-
    сводка_фактов(Ф),
    not(member(Ф, С1)),
    сбор_всех_вариантов([Ф|С1], С2),!.

сбор_всех_вариантов(С1, С2):-
    С2 = С1,!.

вывести_на_экран([]) :- nl,!.

вывести_на_экран([L]) :- 
    format("~w", [L]), nl,!.

вывести_на_экран([H|T]) :-
    format("~w", [H]), nl,
    вывести_на_экран(T).

вывод():-
    сбор_всех_вариантов([], С),
	вывести_на_экран(С).	

